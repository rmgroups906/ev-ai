name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]   # runs when you push to main
  pull_request:
    branches: [ "main" ]   # also runs on PRs to main

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Backend Deps & Run Tests
        run: |
          cd backend
          pip install -r requirements.txt
          pytest --maxfail=1 --disable-warnings -q

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Frontend Deps & Build
        run: |
          cd frontend
          npm ci
          npm run build

  dockerize-deploy:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Image
        run: docker build -t ev-backend ./backend

      - name: Build Frontend Image
        run: docker build -t ev-frontend ./frontend

      - name: Save Images to Tar
        run: docker save ev-backend ev-frontend -o images.tar

      - name: Secure Copy Images to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "images.tar"
          target: "~/ev-deploy/"

      - name: Deploy on Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/ev-deploy
            docker load -i images.tar
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
            docker system prune -f
            echo "Deployment completed!"
